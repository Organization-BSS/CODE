/* 
  Decorator-Description.strings
  DesignPattern_Decorator

  Created by bss on 12/7/16.
  Copyright © 2016 DevilTaining. All rights reserved.
*/
/*装饰模式
 在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
 中文名 装饰模式 外文名 Decorator Pattern 类    别 设计模式 又    名 装饰者模式 设计原则  多用组合，少用继承
 目录
 1 概述
 2 装饰模式的特点
 3 适用性
 4 优点
 5 缺点
 6 设计原则
 7 模式简化
 8 装饰者与适配者模式的区别
 9 实际使用
 10 代码示例
 概述编辑
 23种设计模式之一，英文叫Decorator Pattern，又叫装饰者模式。装饰模式是在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。
 装饰模式的特点编辑
 （1） 装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
 （2） 装饰对象包含一个真实对象的引用（reference）
 （3） 装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
 （4） 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。
 适用性编辑
 以下情况使用Decorator模式
 1. 需要扩展一个类的功能，或给一个类添加附加职责。
 2. 需要动态的给一个对象添加功能，这些功能可以再动态的撤销。
 3. 需要增加由一些基本功能的排列组合而产生的非常大量的功能，从而使继承关系变的不现实。
 4. 当不能采用生成子类的方法进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏，或类定义不能用于生成子类。
 优点编辑
 1. Decorator模式与继承关系的目的都是要扩展对象的功能，但是Decorator可以提供比继承更多的灵活性。
 2. 通过使用不同的具体装饰类以及这些装饰类的排列组合，设计师可以创造出很多不同行为的组合。
 　　装饰模式以对客户透明的方式动态地给一个对象附加上更多的责任。换言之，客户端并不会觉得对象在装饰前和装饰后有什么不同。装饰模式可以在不使用创造更多子类的情况下，将对象的功能加以扩展。
 缺点编辑
 1. 这种比继承更加灵活机动的特性，也同时意味着更加多的复杂性。
 2. 装饰模式会导致设计中出现许多小类，如果过度使用，会使程序变得很复杂。
 3. 装饰模式是针对抽象组件（Component）类型编程。但是，如果你要针对具体组件编程时，就应该重新思考你的应用架构，以及装饰者是否合适。当然也可以改变Component接口，增加新的公开的行为，实现“半透明”的装饰者模式。在实际项目中要做出最佳选择。
 设计原则编辑
 1. 多用组合，少用继承。
 利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。然而，如果能够利用组合的做法扩展对象的行为，就可以在运行时动态地进行扩展。
 2. 类应设计的对扩展开放，对修改关闭。
 模式简化编辑
 1. 如果只有一个Concrete Component类而没有抽象的Component接口时，可以让Decorator继承Concrete Component。
 2. 如果只有一个Concrete Decorator类时，可以将Decorator和Concrete Decorator合并。
 装饰者与适配者模式的区别编辑
 1.关于新职责：适配器也可以在转换时增加新的职责，但主要目的不在此。装饰者模式主要是给被装饰者增加新职责的。
 2.关于原接口：适配器模式是用新接口来调用原接口，原接口对新系统是不可见或者说不可用的。装饰者模式原封不动的使用原接口，系统对装饰的对象也通过原接口来完成使用。（增加新接口的装饰者模式可以认为是其变种--“半透明”装饰者）
 3.关于其包裹的对象：适配器是知道被适配者的详细情况的（就是那个类或那个接口）。装饰者只知道其接口是什么，至于其具体类型（是基类还是其他派生类）只有在运行期间才知道。[1]
 实际使用编辑
 java IO 流是典型的装饰模式。
 代码示例编辑
 在装饰模式中的各个角色有：
 　　（1）抽象构件（Component）角色：给出一个抽象接口，以规范准备接收附加责任的对象。
 　　（2）具体构件（Concrete Component）角色：定义一个将要接收附加责任的类。
 　　（3）装饰（Decorator）角色：持有一个构件（Component）对象的实例，并实现一个与抽象构件接口一致的接口。
 　　（4）具体装饰（Concrete Decorator）角色：负责给构件对象添加上附加的责任。
 以下示例中，ThirdParty.Java假定是一个现有的或者第三方的功能，因某种原因我们不能直接修改，它提供了一个sayMsg()的方法，而我们现在要做的是想在它的sayMsg()方法中增加一些我们想额外输出的内容，于是我们重写了一个Decorator.java类。MailTest.java是客户端测试程序。
 IthirdParty.Java--抽象接口类
 =====================
 package decorator.saystr;
 public interface IthirdParty {
 public String sayMsg();
 }
 ThirdParty.Java--具体类
 ===================
 public class ThirdParty implements IthirdParty {
 public String sayMsg() {
 　　return "hello";
 　　}
 }
 Decorator1.java 具体装饰类1
 ==================
 package decorator.saystr;
 public class Decorator1 implements IThirdParty {
 private IThirdParty thirdParty;
 public Decorator1(IThirdParty thirdParty){
 this.thirdParty= thirdParty;
 }
 public String sayMsg(){
 return "##1"+ thirdParty.sayMsg() + "##1";
 }
 }
 Decorator1.java 具体装饰类2
 ==================
 package decorator.saystr;
 public class Decorator2 implements IThirdParty {
 private IThirdParty thirdParty;
 public Decorator2(IThirdParty thirdParty){
 this.thirdParty= thirdParty;
 }
 public String sayMsg(){
 return "##2"+ thirdParty.sayMsg() + "##2";
 }
 }
 MailTest.java
 ====================
 package decorator.saystr;
 public class MailTest {
 public static void main(String[] args){
 
 　　IthirdParty thirdPartyOne =new ThirdParty();
 　　IthirdParty decorator1 =new Decorator1(thirdPartyOne);
 　　IthirdParty decorator2 =new Decorator2(decorator1);
 　　
 　　System.out.println(decorator2.sayMsg());
 }
 }
 执行结果是：##2##1hello##1##2

 

 
 
*/